#!/usr/bin/python

lib_srcs = [
        'src/cdb', 'src/parse_inquiry', 'src/ata', 'src/parse_sense', 'src/parse_read_cap', 'src/str_map',
        'smartdb/smartdb', 'smartdb/smartdb_gen',
]

test_srcs = {
        'ata_check_power_mode': (),
        'ata_smart_read_data': (),
        'ata_smart_return_status': (),
        'scsi_inquiry': (),
        'scsi_log_sense': (),
        'scsi_read_capacity_10': (),
        #'ata_identify': ('ata_identify_dump.c', 'ata_identify_dump.h')
}

cflags = ['-Iinclude', '-g', '-O0', '-Wall', '-Werror', '-Wextra', '-Wshadow',
          '-Wmissing-prototypes', '-Winit-self', '-pipe', '-D_GNU_SOURCE',
          '-D_FORTIFY_SOURCE=2']
ldflags = []

import os, os.path
import glob
import ninja_syntax

n = ninja_syntax.Writer(file('build.ninja', 'w'))
n.comment('Auto generated by ./configure, edit the configure script instead')
n.newline()

env_keys = set(['CC', 'AR', 'CFLAGS', 'LDFLAGS'])
configure_env = dict((k, os.environ[k]) for k in os.environ if k in env_keys)
if configure_env:
    config_str = ' '.join([k+'='+configure_env[k] for k in configure_env])
    n.variable('configure_env', config_str+'$ ')
n.newline()

CC = configure_env.get('CC', 'gcc')
n.variable('cc', CC)
AR = configure_env.get('AR', 'ar')
n.variable('ar', AR)
n.newline()

def shell_escape(str):
        """Escape str such that it's interpreted as a single argument by
           the shell."""

        # This isn't complete, but it's just enough to make NINJA_PYTHON work.
        if '"' in str:
                return "'%s'" % str.replace("'", "\\'")
        return str

if 'CFLAGS' in configure_env:
    cflags.append(configure_env['CFLAGS'])
n.variable('cflags', ' '.join(shell_escape(flag) for flag in cflags))

if 'LDFLAGS' in configure_env:
    ldflags.append(configure_env['LDFLAGS'])
n.variable('ldflags', ' '.join(shell_escape(flag) for flag in ldflags))

n.newline()

n.rule('c',
        command='$cc -MMD -MT $out -MF $out.d $cflags $extracflags -c $in -o $out',
        depfile='$out.d',
        deps='gcc',
        description='CC $out'
)
n.newline()

n.rule('ar',
        command='rm -f $out && $ar crs $out $in',
        description='AR $out',
)
n.newline()

n.rule('link',
        command='$cc -o $out $in $libs $ldflags',
        description='LINK $out'
)
n.newline()

n.rule('script',
        command='$script $in > $out',
        description='SCRIPT $script $in'
)
n.newline()

def src(filename):
        return os.path.join('src', filename)
def btest(filename):
        return os.path.join('test', filename)
def built(filename):
        return os.path.join('built', filename)
def cc(filename, src, **kwargs):
        if filename.endswith('.c'):
                return n.build(built(filename)[:-2] + '.o', 'c', filename, **kwargs)
        else:
                return n.build(built(filename) + '.o', 'c', filename + '.c', **kwargs)

all_targets = []

smartdb_gen_c = n.build('smartdb/smartdb_gen.c', 'script', 'smartdb/smartdb.xml', implicit='smartdb/smartdb_gen_c.py',
        variables=[('script', 'smartdb/smartdb_gen_c.py')])

lib_objs = []
for source in lib_srcs:
        lib_objs += cc(source, src)
lib = n.build('libscsicmd.a', 'ar', lib_objs)
all_targets += lib
n.newline()

#test_exec = []
#test_objs = {}
#for test in test_srcs.keys():
#        objs = []
#        for source in test_srcs[test]:
#                if source in test_objs.keys():
#                        objs += test_objs[source]
#                else:
#                        obj = cc(source, btest)
#                        test_objs[source] = obj
#                        objs += obj
#        test_exec += n.build(test, 'link', objs, implicit=lib, variables=[('libs', lib)])
#        all_targets += test_exec
#n.newline()
#
#test_objs = []
#for fname in glob.glob('test/ct_*.c'):
#    test_objs += cc(fname, src, variables=[('extracflags', '-Wno-missing-prototypes')])
#ct_gen_src = n.build('test/ct/ct_gen.c', 'ct_gen', test_objs, implicit=['test/ct/gen'])
#test_objs += cc('ct/ct_gen', btest)
#test_objs += cc('ct/ct', btest, variables=[('cflags', '')])
#test_exec += n.build('ct', 'link', test_objs, variables=[('libs', lib)], implicit=lib)
#all_targets += test_exec
#n.newline()

n.rule('configure',
        command='${configure_env} ./configure',
        description='CONFIGURE build.ninja',
        generator=True
        )
all_targets += n.build('build.ninja', 'configure', implicit=['./configure', 'build/configure'])
n.newline()

n.rule('tags',
        command='ctags $in',
        description='CTAGS $out'
        )
all_targets += n.build('tags', 'tags', [name + '.c' for name in lib_srcs] + glob.glob('include/*.h'))
n.newline()

n.build('all', 'phony', all_targets)
n.default('all')

print 'Configure done'
